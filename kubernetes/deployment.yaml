# Atlas Codex - Kubernetes Deployment Configuration
apiVersion: v1
kind: Namespace
metadata:
  name: atlas-codex

---
# ConfigMap for environment variables
apiVersion: v1
kind: ConfigMap
metadata:
  name: atlas-config
  namespace: atlas-codex
data:
  AWS_REGION: "us-west-2"
  NODE_ENV: "production"
  ENABLE_EVIDENCE: "true"
  ENABLE_COST_OPT: "true"
  MAX_CONCURRENT: "5"
  API_PORT: "3000"

---
# Secret for sensitive data
apiVersion: v1
kind: Secret
metadata:
  name: atlas-secrets
  namespace: atlas-codex
type: Opaque
stringData:
  OPENAI_API_KEY: "your-openai-api-key"
  API_KEY: "your-atlas-api-key"
  AWS_ACCESS_KEY_ID: "your-aws-access-key"
  AWS_SECRET_ACCESS_KEY: "your-aws-secret-key"

---
# Redis Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: atlas-codex
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:7-alpine
        ports:
        - containerPort: 6379
        volumeMounts:
        - name: redis-storage
          mountPath: /data
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc

---
# Redis Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: atlas-codex
spec:
  selector:
    app: redis
  ports:
  - port: 6379
    targetPort: 6379

---
# API Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-api
  namespace: atlas-codex
spec:
  replicas: 3
  selector:
    matchLabels:
      app: atlas-api
  template:
    metadata:
      labels:
        app: atlas-api
    spec:
      containers:
      - name: api
        image: atlas-codex/api:latest
        ports:
        - containerPort: 3000
        env:
        - name: REDIS_URL
          value: "redis://redis:6379"
        envFrom:
        - configMapRef:
            name: atlas-config
        - secretRef:
            name: atlas-secrets
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5

---
# API Service
apiVersion: v1
kind: Service
metadata:
  name: atlas-api
  namespace: atlas-codex
spec:
  type: LoadBalancer
  selector:
    app: atlas-api
  ports:
  - port: 80
    targetPort: 3000

---
# Worker Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-worker
  namespace: atlas-codex
spec:
  replicas: 5
  selector:
    matchLabels:
      app: atlas-worker
  template:
    metadata:
      labels:
        app: atlas-worker
    spec:
      containers:
      - name: worker
        image: atlas-codex/worker:latest
        env:
        - name: REDIS_URL
          value: "redis://redis:6379"
        envFrom:
        - configMapRef:
            name: atlas-config
        - secretRef:
            name: atlas-secrets
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"

---
# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: atlas-frontend
  namespace: atlas-codex
spec:
  replicas: 2
  selector:
    matchLabels:
      app: atlas-frontend
  template:
    metadata:
      labels:
        app: atlas-frontend
    spec:
      containers:
      - name: frontend
        image: atlas-codex/frontend:latest
        ports:
        - containerPort: 80
        env:
        - name: REACT_APP_API_URL
          value: "http://atlas-api"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"

---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: atlas-frontend
  namespace: atlas-codex
spec:
  type: LoadBalancer
  selector:
    app: atlas-frontend
  ports:
  - port: 80
    targetPort: 80

---
# Persistent Volume Claim for Redis
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: atlas-codex
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi

---
# HorizontalPodAutoscaler for API
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: atlas-api-hpa
  namespace: atlas-codex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: atlas-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HorizontalPodAutoscaler for Workers
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: atlas-worker-hpa
  namespace: atlas-codex
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: atlas-worker
  minReplicas: 5
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 70

---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: atlas-ingress
  namespace: atlas-codex
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  tls:
  - hosts:
    - api.atlascodex.com
    - app.atlascodex.com
    secretName: atlas-tls
  rules:
  - host: api.atlascodex.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-api
            port:
              number: 80
  - host: app.atlascodex.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: atlas-frontend
            port:
              number: 80
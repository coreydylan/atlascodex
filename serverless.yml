# Simplified Serverless config for Atlas Codex
service: atlas-codex

provider:
  name: aws
  runtime: nodejs20.x
  region: us-west-2
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${self:custom.stage.${self:provider.stage}.NODE_ENV, 'production'}
    MASTER_API_KEY: ${env:MASTER_API_KEY, 'test-key-123'}
    OPENAI_API_KEY: ${env:OPENAI_API_KEY, ''}
    UNIFIED_EXTRACTOR_ENABLED: ${env:UNIFIED_EXTRACTOR_ENABLED, 'false'}
    # GPT-5 Configuration
    GPT5_ENABLED: ${env:GPT5_ENABLED, 'true'}
    GPT5_MODEL_SELECTION: ${env:GPT5_MODEL_SELECTION, 'auto'}
    GPT5_FALLBACK_ENABLED: ${env:GPT5_FALLBACK_ENABLED, 'true'}
    GPT5_REASONING_ENABLED: ${env:GPT5_REASONING_ENABLED, 'true'}
    QUEUE_URL: 
      Ref: JobQueue

custom:
  stage:
    dev:
      NODE_ENV: development
      SERVICE_NAME: atlas-codex-dev
    staging:
      NODE_ENV: production
      SERVICE_NAME: atlas-codex-staging
    production:
      NODE_ENV: production
      SERVICE_NAME: atlas-codex-production
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: 
            - "arn:aws:dynamodb:${self:provider.region}:*:table/atlas-codex-jobs"
            - "arn:aws:dynamodb:${self:provider.region}:*:table/atlas-codex-jobs/index/*"
        - Effect: Allow
          Action:
            - s3:GetObject
            - s3:PutObject
            - s3:DeleteObject
          Resource: "arn:aws:s3:::*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
          Resource: "arn:aws:sqs:${self:provider.region}:*:atlas-codex-jobs*"
        - Effect: Allow
          Action:
            - execute-api:ManageConnections
            - execute-api:Invoke
          Resource: "*"

package:
  individually: true
  patterns:
    - '!packages/**'
    - '!.git/**'
    - '!.github/**'
    - '!*.md'
    - '!test/**'
    - '!tests/**'
    - '!.claude/**'
    - '!.serverless/**'
    - 'api/**'
    - 'node_modules/**'

functions:
  api:
    handler: api/lambda.handler
    package:
      patterns:
        - 'api/lambda.js'
        - 'api/atlas-generator-integration.js'
        - 'api/ai-processor.js'
        - 'api/worker-enhanced.js'  # Include our improved extraction system
        - 'api/evidence-first-bridge.js'  # Include unified extractor
        - 'api/services/**'  # Include GPT-5 services
        - 'api/ai-processor-v2.js'  # Include GPT-5 AI processor
        - 'api/evidence-first-bridge-v2.js'  # Include GPT-5 evidence bridge
        - 'node_modules/**'
    events:
      - http:
          path: /{proxy+}
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - x-api-key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false
      - http:
          path: /
          method: ANY
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - x-api-key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
              - X-Amzn-Trace-Id
            allowCredentials: false
    timeout: 120
    memorySize: 1024
    environment:
      WEBSOCKET_API_ENDPOINT:
        Fn::Sub: "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  
  worker:
    handler: api/worker-enhanced.handler
    package:
      patterns:
        - 'api/worker-enhanced.js'
        - 'api/services/**'
        - 'api/config/**'
        - 'api/schemas/**'
        - 'api/middleware/**'
        - 'api/ai-processor.js'
        - 'api/ai-processor-v2.js'
        - 'api/evidence-first-bridge.js'
        - 'api/evidence-first-bridge-v2.js'
        - 'api/atlas-generator-integration.js'
        - 'node_modules/**'
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - JobQueue
              - Arn
          batchSize: 1
    timeout: 280  # Reduced to leave cleanup buffer
    memorySize: 3008  # Maximum memory for better performance
    environment:
      ARTIFACTS_BUCKET:
        Ref: ArtifactsBucket
      WEBSOCKET_API_ENDPOINT:
        Fn::Sub: "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/dev"
  
  # WebSocket Connection Handler
  websocketConnect:
    handler: api/websocket.connect
    events:
      - websocket: $connect
    environment:
      CONNECTIONS_TABLE:
        Ref: ConnectionsTable
  
  # WebSocket Disconnect Handler  
  websocketDisconnect:
    handler: api/websocket.disconnect
    events:
      - websocket: $disconnect
    environment:
      CONNECTIONS_TABLE:
        Ref: ConnectionsTable
  
  # WebSocket Default Handler
  websocketDefault:
    handler: api/websocket.default
    events:
      - websocket: $default
    environment:
      CONNECTIONS_TABLE:
        Ref: ConnectionsTable

resources:
  Resources:
    JobsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-jobs-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
    
    JobQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-queue-${self:provider.stage}
        VisibilityTimeout: 360  # 6 minutes (longer than Lambda timeout)
        MessageRetentionPeriod: 86400  # 1 day
        ReceiveMessageWaitTimeSeconds: 20  # Long polling
        RedrivePolicy:
          deadLetterTargetArn:
            Fn::GetAtt:
              - JobDeadLetterQueue
              - Arn
          maxReceiveCount: 2  # Move to DLQ after 2 failed attempts
    
    # Dead Letter Queue for failed jobs
    JobDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-dlq-${self:provider.stage}
        MessageRetentionPeriod: 1209600  # 14 days
        VisibilityTimeout: 360
    
    ArtifactsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-artifacts-${sls:instanceId}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins: ["*"]
              AllowedHeaders: ["*"]
              AllowedMethods: [GET, PUT, POST]
    
    # WebSocket API
    WebSocketApi:
      Type: AWS::ApiGatewayV2::Api
      Properties:
        Name: ${self:service}-websocket-${self:provider.stage}
        ProtocolType: WEBSOCKET
        RouteSelectionExpression: "$request.body.action"
    
    # WebSocket Connections Table
    ConnectionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:service}-connections-${self:provider.stage}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: connectionId
            AttributeType: S
        KeySchema:
          - AttributeName: connectionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    # WebSocket Routes
    ConnectRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId:
          Ref: WebSocketApi
        RouteKey: $connect
        AuthorizationType: NONE
        Target:
          Fn::Sub: "integrations/${ConnectIntegration}"
    
    ConnectIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId:
          Ref: WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketConnectLambdaFunction.Arn}/invocations"
    
    DisconnectRoute:
      Type: AWS::ApiGatewayV2::Route  
      Properties:
        ApiId:
          Ref: WebSocketApi
        RouteKey: $disconnect
        AuthorizationType: NONE
        Target:
          Fn::Sub: "integrations/${DisconnectIntegration}"
    
    DisconnectIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId:
          Ref: WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketDisconnectLambdaFunction.Arn}/invocations"
    
    DefaultRoute:
      Type: AWS::ApiGatewayV2::Route
      Properties:
        ApiId:
          Ref: WebSocketApi
        RouteKey: $default
        AuthorizationType: NONE
        Target:
          Fn::Sub: "integrations/${DefaultIntegration}"
    
    DefaultIntegration:
      Type: AWS::ApiGatewayV2::Integration
      Properties:
        ApiId:
          Ref: WebSocketApi
        IntegrationType: AWS_PROXY
        IntegrationUri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebsocketDefaultLambdaFunction.Arn}/invocations"
    
    # WebSocket Stage
    WebSocketStage:
      Type: AWS::ApiGatewayV2::Stage
      Properties:
        ApiId:
          Ref: WebSocketApi
        StageName: dev
        AutoDeploy: true
    
    # Lambda Permissions for WebSocket
    WebSocketConnectPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: WebsocketConnectLambdaFunction
        Principal: apigateway.amazonaws.com
        Action: lambda:InvokeFunction
    
    WebSocketDisconnectPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: WebsocketDisconnectLambdaFunction
        Principal: apigateway.amazonaws.com
        Action: lambda:InvokeFunction
    
    WebSocketDefaultPermission:
      Type: AWS::Lambda::Permission
      Properties:
        FunctionName:
          Ref: WebsocketDefaultLambdaFunction
        Principal: apigateway.amazonaws.com
        Action: lambda:InvokeFunction
    
    # CORS Gateway Responses - Ensure CORS headers on error responses
    GatewayResponse4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseType: DEFAULT_4XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-api-key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
          gatewayresponse.header.Access-Control-Max-Age: "'86400'"
    
    GatewayResponse5XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ResponseType: DEFAULT_5XX
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,x-api-key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,POST,PUT,DELETE,OPTIONS'"
          gatewayresponse.header.Access-Control-Max-Age: "'86400'"
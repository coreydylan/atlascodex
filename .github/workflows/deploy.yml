name: Deploy Atlas Codex

on:
  push:
    branches:
      - main           # Triggers dev/staging deployment
      - production     # Triggers production deployment
  pull_request:
    branches:
      - main
      - production
  workflow_dispatch:   # Manual trigger for rollbacks

env:
  NODE_VERSION: '20'
  AWS_REGION: 'us-west-2'

jobs:
  # Test and validate on all branches
  test:
    name: Test & Validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Serverless v3
        run: npm install -g serverless@3

      - name: Check for serverless.yml
        run: test -f serverless.yml || exit 1

      - name: Validate serverless config
        run: serverless print --stage dev > /dev/null

  # Deploy to Development (main branch)
  deploy-dev:
    name: Deploy to Development
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://gxi4vg8gla.execute-api.us-west-2.amazonaws.com/dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install production dependencies
        run: |
          # Use production deployment script logic
          rm -rf node_modules package-lock.json
          npm install --production
          npm install -g serverless@3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to AWS Lambda (Development)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MASTER_API_KEY: ${{ secrets.DEV_MASTER_API_KEY }}
          UNIFIED_EXTRACTOR_ENABLED: true
        run: |
          echo "üöÄ Deploying to development environment..."
          serverless deploy --stage dev --verbose
          
      - name: Update Lambda Alias
        run: |
          # Publish new version
          VERSION=$(aws lambda publish-version \
            --function-name atlas-codex-dev-api \
            --description "Dev deployment - ${{ github.sha }}" \
            --query Version --output text)
          
          # Update staging alias
          aws lambda update-alias \
            --function-name atlas-codex-dev-api \
            --name staging \
            --function-version $VERSION 2>/dev/null || \
          aws lambda create-alias \
            --function-name atlas-codex-dev-api \
            --name staging \
            --function-version $VERSION
          
          echo "‚úÖ Lambda version $VERSION deployed to staging alias"

      - name: Run smoke tests
        run: |
          sleep 10  # Wait for deployment to stabilize
          
          # Test health endpoint
          curl -f https://gxi4vg8gla.execute-api.us-west-2.amazonaws.com/dev/health || exit 1
          
          # Test basic extraction (with timeout)
          timeout 30 curl -X POST https://gxi4vg8gla.execute-api.us-west-2.amazonaws.com/dev/api/extract \
            -H "Content-Type: application/json" \
            -H "x-api-key: test-key-123" \
            -d '{"url":"https://example.com","extractionInstructions":"Extract title","UNIFIED_EXTRACTOR_ENABLED":true}' \
            || echo "Warning: Extraction test timed out or failed"
          
          echo "‚úÖ Development deployment successful"

  # Deploy to Production (production branch)
  deploy-production:
    name: Deploy to Production
    needs: test
    if: github.ref == 'refs/heads/production' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://atlas-codex-api.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install production dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install --production
          npm install -g serverless@3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Create backup before deployment
        run: |
          # Save current production version
          CURRENT_VERSION=$(aws lambda get-alias \
            --function-name atlas-codex-prod-api \
            --name prod \
            --query FunctionVersion \
            --output text 2>/dev/null || echo "1")
          
          echo "BACKUP_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
          echo "üì∏ Current production version: $CURRENT_VERSION"

      - name: Deploy to AWS Lambda (Production)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          MASTER_API_KEY: ${{ secrets.PROD_MASTER_API_KEY }}
          UNIFIED_EXTRACTOR_ENABLED: true
        run: |
          echo "üöÄ Deploying to production environment..."
          serverless deploy --stage prod --verbose
          
      - name: Canary deployment (10% traffic)
        run: |
          # Publish new version
          VERSION=$(aws lambda publish-version \
            --function-name atlas-codex-prod-api \
            --description "Production deployment - ${{ github.sha }}" \
            --query Version --output text)
          
          echo "NEW_VERSION=$VERSION" >> $GITHUB_ENV
          
          # Start with 10% traffic to new version
          aws lambda update-alias \
            --function-name atlas-codex-prod-api \
            --name prod \
            --function-version ${{ env.BACKUP_VERSION }} \
            --routing-config AdditionalVersionWeights={\"$VERSION\"=0.1} 2>/dev/null || \
          aws lambda create-alias \
            --function-name atlas-codex-prod-api \
            --name prod \
            --function-version $VERSION
          
          echo "üïê Canary: 10% traffic to version $VERSION for 2 minutes..."
          sleep 120

      - name: Monitor canary metrics
        run: |
          # Check CloudWatch metrics for errors
          END_TIME=$(date -u +%Y-%m-%dT%H:%M:%S)
          START_TIME=$(date -u -d '3 minutes ago' +%Y-%m-%dT%H:%M:%S)
          
          ERROR_COUNT=$(aws cloudwatch get-metric-statistics \
            --namespace AWS/Lambda \
            --metric-name Errors \
            --dimensions Name=FunctionName,Value=atlas-codex-prod-api \
            --start-time $START_TIME \
            --end-time $END_TIME \
            --period 60 \
            --statistics Sum \
            --query 'Datapoints[0].Sum' \
            --output text)
          
          if [ "$ERROR_COUNT" != "None" ] && [ "$ERROR_COUNT" -gt "5" ]; then
            echo "‚ö†Ô∏è High error rate detected: $ERROR_COUNT errors"
            echo "CANARY_FAILED=true" >> $GITHUB_ENV
          else
            echo "‚úÖ Canary healthy, promoting to 100%"
            echo "CANARY_FAILED=false" >> $GITHUB_ENV
          fi

      - name: Promote or rollback
        run: |
          if [ "${{ env.CANARY_FAILED }}" == "true" ]; then
            # Rollback to previous version
            aws lambda update-alias \
              --function-name atlas-codex-prod-api \
              --name prod \
              --function-version ${{ env.BACKUP_VERSION }}
            
            echo "‚ùå Deployment rolled back to version ${{ env.BACKUP_VERSION }}"
            exit 1
          else
            # Promote to 100% traffic
            aws lambda update-alias \
              --function-name atlas-codex-prod-api \
              --name prod \
              --function-version ${{ env.NEW_VERSION }}
            
            echo "‚úÖ Version ${{ env.NEW_VERSION }} promoted to 100% traffic"
          fi

      - name: Run production tests
        run: |
          # Run the golden tests
          chmod +x scripts/test-stable.sh
          bash scripts/test-stable.sh || echo "Warning: Some tests failed"
          
          echo "‚úÖ Production deployment complete"

      - name: Create deployment record
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Lambda version ${{ env.NEW_VERSION }}',
              auto_merge: false,
              required_contexts: [],
              production_environment: true
            });

  # Manual rollback job
  rollback:
    name: Emergency Rollback
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Rollback to stable version
        run: |
          # Rollback to known stable version 45
          aws lambda update-alias \
            --function-name atlas-codex-prod-api \
            --name prod \
            --function-version 45
          
          echo "‚ö†Ô∏è Emergency rollback completed - restored to version 45"
          echo "üìä Please check CloudWatch metrics and logs"
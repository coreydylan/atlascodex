AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Infrastructure for Atlas Codex Worker

Parameters:
  ServiceName:
    Type: String
    Default: atlas-codex
    Description: Name prefix for the service
  
  ImageUri:
    Type: String
    Default: 790856971687.dkr.ecr.us-west-2.amazonaws.com/atlas-codex-worker:latest
    Description: Docker image URI
  
  QueueUrl:
    Type: String
    Description: SQS Queue URL for the worker
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VPC ID for the ECS cluster
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: Subnet IDs for the ECS tasks

Resources:
  # ECS Cluster
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub '${ServiceName}-cluster'
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 2
        - CapacityProvider: FARGATE
          Weight: 1

  # CloudWatch Log Group
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/ecs/${ServiceName}-worker'
      RetentionInDays: 7

  # Task Execution Role
  TaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECRAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: WorkerPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !Sub 'arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${ServiceName}-queue'
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-jobs'
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceName}-connections'
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub 'arn:aws:s3:::${ServiceName}-artifacts-*/*'
              - Effect: Allow
                Action:
                  - execute-api:ManageConnections
                  - execute-api:Invoke
                Resource: '*'

  # Task Definition
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub '${ServiceName}-worker'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'  # 2 vCPU
      Memory: '4096'  # 4 GB
      ExecutionRoleArn: !GetAtt TaskExecutionRole.Arn
      TaskRoleArn: !GetAtt TaskRole.Arn
      ContainerDefinitions:
        - Name: worker
          Image: !Ref ImageUri
          Essential: true
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: QUEUE_URL
              Value: !Ref QueueUrl
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: PLAYWRIGHT_BROWSERS_PATH
              Value: /app/browsers
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: worker
          HealthCheck:
            Command:
              - CMD-SHELL
              - node -e "console.log('healthy')"
            Interval: 30
            Timeout: 5
            Retries: 3
            StartPeriod: 60

  # Security Group for ECS Tasks
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0

  # ECS Service
  ECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${ServiceName}-worker-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref SecurityGroup
          Subnets: !Ref SubnetIds
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100

  # Auto-scaling Target
  ScalableTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: ECSService
    Properties:
      ServiceNamespace: ecs
      ScalableDimension: ecs:service:DesiredCount
      ResourceId: !Sub 'service/${ECSCluster}/${ServiceName}-worker-service'
      MinCapacity: 0
      MaxCapacity: 10

  # Auto-scaling Policy based on SQS Queue
  ScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub '${ServiceName}-sqs-scaling'
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        TargetValue: 50
        ScaleInCooldown: 300
        ScaleOutCooldown: 60

  # CloudWatch Alarm for SQS Queue Depth
  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${ServiceName}-queue-depth'
      AlarmDescription: Alarm when SQS queue has messages
      MetricName: ApproximateNumberOfMessagesVisible
      Namespace: AWS/SQS
      Statistic: Average
      Period: 60
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: QueueName
          Value: !Sub '${ServiceName}-queue'

Outputs:
  ClusterName:
    Description: ECS Cluster Name
    Value: !Ref ECSCluster
  
  ServiceName:
    Description: ECS Service Name
    Value: !GetAtt ECSService.Name
  
  TaskDefinitionArn:
    Description: Task Definition ARN
    Value: !Ref TaskDefinition